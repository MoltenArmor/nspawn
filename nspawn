#!/usr/bin/bash
#
# nspawn - nspawn is a wrapper around machinectl pull
#
# Copyright (c) 2021 by Christian Rebischke <chris@nullday.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http: #www.gnu.org/licenses/
#
#======================================================================
# Author: Christian Rebischke
# Email : chris@nullday.de
# Github: www.github.com/shibumi
# Contributor: Eduard Tolosa
# Email: edu4rdshl@protonmail.com
# Github: www.github.com/edu4rdshl

set -ue
VERSION="0.6"
STATIC_NAME="Nspawn (https://nspawn.org)"

#
# Defaults
#

BASEURL="${NSPAWN_BASEURL:-https://hub.nspawn.org/storage}"
LISTURL="${BASEURL}/list.txt"
KEYLOCATION="${BASEURL}/masterkey.pgp"

echo() {
    printf '%s\n' "${*}"
}

ctrl_c() {
    echo "Keyboard Interrupt detected, leaving."
    exit
}

trap ctrl_c INT

version() {
    echo "${STATIC_NAME} ${VERSION}"
}

help() {
    local program
    program="$(basename -- "${0}")"

    echo "Menu usage for ${STATIC_NAME} ${VERSION}"
    echo
    echo "${program} {COMMAND} [PARAMETER]"
    echo
    echo "Wrapper around systemd-machined and ${BASEURL}"
    echo
    echo "Commands:"
    echo "  -i/--init          Initializes an image for systemd-machined with the following parameters: <distribution>/<release>/<type>"
    echo "  -s/--skip-verification    Skip GPG key verification"
    echo "  -l/--list          Lists all available images"
    echo "  -h/--help          Prints this help message"
    echo "  -v/--version       Prints version info"
    echo
    echo "Parameters:"
    echo "  <distribution>  Check ${program} -l/--list for more information and which distribution names to use."
    echo "  <release>       The release of the distribution"
    echo "  <type>          One out of (raw,tar)"
}

if [ "$#" -eq 0 ]; then
    help
    exit
fi

escalate_privilege() {
    if [ "${EUID}" -ne 0 ]; then
        echo "$(basename -- "${0}") needs root privileges for the following action:"
        echo " ${1}"
        exit 1
    fi
}

check_pubring() {
    if ! [ -f "/etc/systemd/import-pubring.gpg" ]; then
        echo "/etc/systemd/import-pubring.gpg does not exist"
        read -rp "Do you want to create it [y/n]: " keyring_choice
        case "${keyring_choice}" in
        y | Y)
            escalate_privilege "Setting up the GPG keyring"
            gpg --no-default-keyring --keyring=/etc/systemd/import-pubring.gpg --fingerprint
            tfile="$(mktemp -u /tmp/masterkey.nspawn.org.XXXXXXXXXXX)"
            curl "${KEYLOCATION}" -o "${tfile}"
            gpg --no-default-keyring --keyring=/etc/systemd/import-pubring.gpg --import "${tfile}"
            rm -f "${tfile}"
            ;;
        n | N)
            exit 2
            ;;
        *)
            exit 2
            ;;
        esac
    fi
}

list() {
    echo
    echo "${LISTURL}"
    echo
    curl "${LISTURL}"
}

init() {
    check_pubring
    distribution="$(echo "${1}" | cut -d "/" -f 1)"
    release="$(echo "${1}" | cut -d "/" -f 2)"
    type="$(basename "${1}")"
    image_url="${BASEURL}/${distribution}/${release}/${type}/image.${type}.xz"
    output_image="${distribution}-${release}-${type}"
    check_image_location="$(curl -o /dev/null -sIw '%{http_code}' "${image_url}")"
    if [ "${check_image_location}" -eq 200 ]; then
        if machinectl show-image "${output_image}" > /dev/null 2>&1; then
            echo "Machine ${output_image} already exists. Details:"
            echo
            machinectl show-image "${output_image}"
            echo
            exit
        fi

        escalate_privilege "Pulling the image via machinectl-${type}..."
        if importctl -m pull-"${type}" "${image_url}" "${output_image}" 2> /dev/null; then
            echo
            echo "Removing read-only flag if present from image ${output_image}..."
            if machinectl read-only "${output_image}" false > /dev/null 2>&1; then
                echo "Image deployed locally as ${output_image}. Details:"
                echo
                machinectl show-image "${output_image}"
                echo
            fi
        else
            echo "Error while deploying image."
        fi
    else
        echo "Error: ${check_image_location}. Wrong type, distribution or release in ${output_image}. Try 'nspawn --list'."
    fi
}

init_noverification() {
    distribution="$(echo "${1}" | cut -d "/" -f 1)"
    release="$(echo "${1}" | cut -d "/" -f 2)"
    type="$(basename "${1}")"
    image_url="${BASEURL}/${distribution}/${release}/${type}/image.${type}.xz"
    output_image="${distribution}-${release}-${type}"
    check_image_location="$(curl -o /dev/null -sIw '%{http_code}' "${image_url}")"
    if [ "${check_image_location}" -eq 200 ]; then
        if machinectl show-image "${output_image}" > /dev/null 2>&1; then
            echo "Machine ${output_image} already exists. Details:"
            echo
            machinectl show-image "${output_image}"
            echo
            exit
        fi

        escalate_privilege "Pulling the image via machinectl-${type}..."
        if importctl -m --verify=no pull-"${type}" "${image_url}" "${output_image}" 2> /dev/null; then
            echo
            echo "Removing read-only flag if present from image ${output_image}..."
            if machinectl read-only "${output_image}" false > /dev/null 2>&1; then
                echo "Image deployed locally as ${output_image}. Details:"
                echo
                machinectl show-image "${output_image}"
                echo
            fi
        else
            echo "Error while deploying image."
        fi
    else
        echo "Error: ${check_image_location}. Wrong type, distribution or release in ${output_image}. Try 'nspawn --list'."
    fi
}

OPTS="$(getopt -o 'vhlsi:' -l 'version,help,list,skip-verify,init:' -- "$@")"
eval set -- "${OPTS}"

while true; do
    case "$1" in
        '-v' | '--version')
            version
            shift
            ;;
        '-h' | '--help')
            help
            shift
            ;;
        '-l' | '--list')
            list
            shift
            ;;
        '-s' | '--skip-verification')
            SKIP_VERIFICATION=1
            shift
            ;;
        '-i' | '--init')
            if [ "${SKIP_VERIFICATION:-}" = 1 ]; then
                init_noverification "$2"
            else
                init "$2"
            fi
            shift 2
            ;;
        '--')
            shift
            break
            ;;
    esac
done

